package handlers

import "time"

// ==================== –†–û–õ–ò –ò –†–ê–ó–†–ï–®–ï–ù–ò–Ø ====================

// RoleRequest –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏
type RoleRequest struct {
	Name        string   `json:"name" binding:"required" example:"moderator"`
	Description string   `json:"description" example:"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –∫–æ–º–Ω–∞—Ç—ã"`
	Permissions []string `json:"permissions" example:"[\"messages.delete\", \"users.mute\"]"`
	IsDefault   bool     `json:"isDefault" example:"false"`
}

// AssignRoleRequest –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏
type AssignRoleRequest struct {
	UserID    uint       `json:"userId" binding:"required" example:"1"`
	RoleID    uint       `json:"roleId" binding:"required" example:"2"`
	RoomID    *uint      `json:"roomId" example:"1"`
	ExpiresAt *time.Time `json:"expiresAt" example:"2024-12-31T23:59:59Z"`
}

// ==================== –î–í–£–•–§–ê–ö–¢–û–†–ù–ê–Ø –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ====================

// Setup2FAResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ 2FA
type Setup2FAResponse struct {
	Secret      string   `json:"secret" example:"ABCD1234EFGH5678"`
	BackupCodes []string `json:"backupCodes" example:"[\"12345678\", \"87654321\"]"`
	QRCode      string   `json:"qrCode" example:"otpauth://totp/LinkUp:1?secret=ABCD1234EFGH5678&issuer=LinkUp"`
}

// Verify2FARequest –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 2FA
type Verify2FARequest struct {
	Code string `json:"code" binding:"required" example:"123456"`
}

// ==================== –ê–ù–ê–õ–ò–¢–ò–ö–ê ====================

// AnalyticsResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type AnalyticsResponse struct {
	UserID        uint      `json:"userId" example:"1"`
	MessagesSent  int64     `json:"messagesSent" example:"150"`
	TimeSpent     int64     `json:"timeSpentMinutes" example:"1200"`
	LastActive    time.Time `json:"lastActive" example:"2024-01-15T10:30:00Z"`
	LoginCount    int64     `json:"loginCount" example:"25"`
	FilesUploaded int64     `json:"filesUploaded" example:"10"`
	RoomsJoined   int64     `json:"roomsJoined" example:"5"`
}

// AdminDashboardResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –¥–∞—à–±–æ—Ä–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
type AdminDashboardResponse struct {
	TotalUsers     int64     `json:"totalUsers" example:"1000"`
	ActiveUsers    int64     `json:"activeUsers" example:"150"`
	MessagesToday  int64     `json:"messagesToday" example:"5000"`
	RoomsCount     int64     `json:"roomsCount" example:"50"`
	FilesUploaded  int64     `json:"filesUploaded" example:"200"`
	StorageUsed    int64     `json:"storageUsed" example:"1073741824"`
	LastUpdated    time.Time `json:"lastUpdated" example:"2024-01-15T10:30:00Z"`
}

// ==================== –û–ü–†–û–°–´ ====================

// CreatePollRequest –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
type CreatePollRequest struct {
	Question       string     `json:"question" binding:"required" example:"–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?"`
	Options        []string   `json:"options" binding:"required" example:"[\"Go\", \"Python\", \"JavaScript\", \"Java\"]"`
	MultipleChoice bool       `json:"multipleChoice" example:"false"`
	Anonymous      bool       `json:"anonymous" example:"false"`
	ExpiresAt      *time.Time `json:"expiresAt" example:"2024-01-20T23:59:59Z"`
}

// PollResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–ø—Ä–æ—Å–∞
type PollResponse struct {
	ID             uint                   `json:"id" example:"1"`
	MessageID      uint                   `json:"messageId" example:"123"`
	Question       string                 `json:"question" example:"–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?"`
	Options        []string               `json:"options" example:"[\"Go\", \"Python\", \"JavaScript\", \"Java\"]"`
	Votes          map[string][]uint      `json:"votes" example:"{\"Go\":[1,2], \"Python\":[3,4,5]}"`
	ExpiresAt      *time.Time             `json:"expiresAt" example:"2024-01-20T23:59:59Z"`
	MultipleChoice bool                   `json:"multipleChoice" example:"false"`
	Anonymous      bool                   `json:"anonymous" example:"false"`
	TotalVotes     int64                  `json:"totalVotes" example:"5"`
}

// VotePollRequest –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
type VotePollRequest struct {
	Option string `json:"option" binding:"required" example:"Go"`
}

// ==================== –£–ü–û–ú–ò–ù–ê–ù–ò–Ø ====================

// MentionResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
type MentionResponse struct {
	ID         uint      `json:"id" example:"1"`
	MessageID  uint      `json:"messageId" example:"123"`
	UserID     uint      `json:"userId" example:"1"`
	MentionedBy uint     `json:"mentionedBy" example:"2"`
	Read       bool      `json:"read" example:"false"`
	CreatedAt  time.Time `json:"createdAt" example:"2024-01-15T10:30:00Z"`
}

// ==================== –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ====================

// AchievementResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º
type AchievementResponse struct {
	ID          uint      `json:"id" example:"1"`
	Name        string    `json:"name" example:"–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"`
	Description string    `json:"description" example:"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"`
	Icon        string    `json:"icon" example:"üí¨"`
	Points      int       `json:"points" example:"10"`
	Category    string    `json:"category" example:"messages"`
	Rarity      string    `json:"rarity" example:"common"`
	Completed   bool      `json:"completed" example:"true"`
	CompletedAt *time.Time `json:"completedAt" example:"2024-01-15T10:30:00Z"`
}

// UserLevelResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å —É—Ä–æ–≤–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserLevelResponse struct {
	UserID      uint      `json:"userId" example:"1"`
	Level       int       `json:"level" example:"5"`
	Experience  int64     `json:"experience" example:"2500"`
	Badges      []string  `json:"badges" example:"[\"üí¨\", \"üèÜ\", \"‚≠ê\"]"`
	Title       string    `json:"title" example:"–û–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"`
	NextLevelXP int64     `json:"nextLevelXp" example:"3000"`
}

// ==================== –§–ê–ô–õ–´ ====================

// FileUploadResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
type FileUploadResponse struct {
	ID           uint   `json:"id" example:"1"`
	Filename     string `json:"filename" example:"document.pdf"`
	OriginalName string `json:"originalName" example:"My Document.pdf"`
	Size         int64  `json:"size" example:"1048576"`
	MimeType     string `json:"mimeType" example:"application/pdf"`
	URL          string `json:"url" example:"http://localhost:8080/uploads/1_1642234567890.pdf"`
	Thumbnail    string `json:"thumbnail" example:"http://localhost:8080/uploads/thumbs/1_1642234567890.jpg"`
	Hash         string `json:"hash" example:"a1b2c3d4e5f6"`
	Tags         []string `json:"tags" example:"[\"document\", \"pdf\"]"`
	IsPublic     bool   `json:"isPublic" example:"false"`
}

// ==================== AI –ü–û–ú–û–©–ù–ò–ö ====================

// AIAssistantResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º
type AIAssistantResponse struct {
	ID          uint                   `json:"id" example:"1"`
	RoomID      uint                   `json:"roomId" example:"1"`
	Name        string                 `json:"name" example:"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"`
	Personality string                 `json:"personality" example:"helpful"`
	Commands    []string               `json:"commands" example:"[\"help\", \"weather\", \"translate\"]"`
	Enabled     bool                   `json:"enabled" example:"true"`
	Model       string                 `json:"model" example:"gpt-3.5-turbo"`
	Settings    map[string]interface{} `json:"settings" example:"{\"temperature\": 0.7}"`
}

// ==================== –ò–ì–†–´ ====================

// ChatGameResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏–≥—Ä–æ–π –≤ —á–∞—Ç–µ
type ChatGameResponse struct {
	ID       uint                   `json:"id" example:"1"`
	RoomID   uint                   `json:"roomId" example:"1"`
	Type     string                 `json:"type" example:"trivia"`
	Players  []uint                 `json:"players" example:"[1, 2, 3]"`
	Status   string                 `json:"status" example:"playing"`
	Score    map[uint]int           `json:"score" example:"{\"1\": 10, \"2\": 8, \"3\": 5}"`
	Settings map[string]interface{} `json:"settings" example:"{\"timeLimit\": 30}"`
	Winner   *uint                  `json:"winner" example:"1"`
}

// ==================== –ú–£–ó–´–ö–ê ====================

// MusicRoomResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç–æ–π
type MusicRoomResponse struct {
	RoomID      uint         `json:"roomId" example:"1"`
	CurrentSong string       `json:"currentSong" example:"Song Title - Artist"`
	Queue       []string     `json:"queue" example:"[\"Song 1\", \"Song 2\"]"`
	Playing     bool         `json:"playing" example:"true"`
	Volume      int          `json:"volume" example:"50"`
	DJ          *uint        `json:"dj" example:"1"`
	Playlist    []MusicTrack `json:"playlist"`
}

// MusicTrack –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–∫ –≤ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
type MusicTrack struct {
	ID        string `json:"id" example:"track_123"`
	Title     string `json:"title" example:"Song Title"`
	Artist    string `json:"artist" example:"Artist Name"`
	Duration  int    `json:"duration" example:"180"`
	URL       string `json:"url" example:"https://example.com/song.mp3"`
	Thumbnail string `json:"thumbnail" example:"https://example.com/thumb.jpg"`
}

// ==================== –ö–ê–õ–ï–ù–î–ê–†–¨ ====================

// CalendarEventResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å —Å–æ–±—ã—Ç–∏–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è
type CalendarEventResponse struct {
	ID            uint      `json:"id" example:"1"`
	RoomID        uint      `json:"roomId" example:"1"`
	UserID        uint      `json:"userId" example:"1"`
	Title         string    `json:"title" example:"–í—Å—Ç—Ä–µ—á–∞ –∫–æ–º–∞–Ω–¥—ã"`
	Description   string    `json:"description" example:"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"`
	StartTime     time.Time `json:"startTime" example:"2024-01-15T14:00:00Z"`
	EndTime       time.Time `json:"endTime" example:"2024-01-15T15:00:00Z"`
	Attendees     []uint    `json:"attendees" example:"[1, 2, 3]"`
	Location      string    `json:"location" example:"–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª A"`
	Recurring     bool      `json:"recurring" example:"true"`
	RecurrenceRule string   `json:"recurrenceRule" example:"FREQ=WEEKLY"`
}

// ==================== –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ====================

// GitHubIntegrationResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π GitHub
type GitHubIntegrationResponse struct {
	ID            uint       `json:"id" example:"1"`
	UserID        uint       `json:"userId" example:"1"`
	Repositories  []string   `json:"repositories" example:"[\"user/repo1\", \"user/repo2\"]"`
	Notifications bool       `json:"notifications" example:"true"`
	LastSync      *time.Time `json:"lastSync" example:"2024-01-15T10:30:00Z"`
}

// ==================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ====================

// NotificationSettingsResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
type NotificationSettingsResponse struct {
	UserID       uint                        `json:"userId" example:"1"`
	EmailEnabled bool                        `json:"emailEnabled" example:"true"`
	PushEnabled  bool                        `json:"pushEnabled" example:"true"`
	MentionOnly  bool                        `json:"mentionOnly" example:"false"`
	QuietHours   string                      `json:"quietHours" example:"22:00-08:00"`
	Keywords     []string                    `json:"keywords" example:"[\"–≤–∞–∂–Ω–æ\", \"—Å—Ä–æ—á–Ω–æ\"]"`
	RoomSettings map[uint]RoomNotificationSettings `json:"roomSettings"`
}

// RoomNotificationSettings –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
type RoomNotificationSettings struct {
	RoomID      uint     `json:"roomId" example:"1"`
	Muted       bool     `json:"muted" example:"false"`
	MentionOnly bool     `json:"mentionOnly" example:"false"`
	Keywords    []string `json:"keywords" example:"[\"–≤–∞–∂–Ω–æ\"]"`
}

// ==================== PUSH –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ====================

// PushSubscriptionRequest –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
type PushSubscriptionRequest struct {
	Endpoint   string            `json:"endpoint" binding:"required" example:"https://fcm.googleapis.com/fcm/send/..."`
	Keys       map[string]string `json:"keys" binding:"required" example:"{\"p256dh\":\"...\", \"auth\":\"...\"}"`
	DeviceInfo string            `json:"deviceInfo" example:"Chrome 120.0.0.0"`
}

// ==================== –ú–û–î–ï–†–ê–¶–ò–Ø ====================

// ContentModerationResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
type ContentModerationResponse struct {
	ID            uint      `json:"id" example:"1"`
	MessageID     uint      `json:"messageId" example:"123"`
	ToxicityScore float64   `json:"toxicityScore" example:"0.85"`
	Categories    []string  `json:"categories" example:"[\"harassment\", \"spam\"]"`
	Action        string    `json:"action" example:"warn"`
	Reviewed      bool      `json:"reviewed" example:"false"`
	ReviewedBy    *uint     `json:"reviewedBy" example:"1"`
	ReviewNote    string    `json:"reviewNote" example:"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"`
}
